/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public int[][] SpiralMatrix(int m, int n, ListNode head) {
        int[][] result = new int[m][];
        for (int i = 0; i < m; i++) {
            result[i] = new int[n];
            for (int j = 0; j < n; j++) {
                result[i][j] = -1;
            }
        }

        ListNode curr = head;
        int top = 0, bottom = m - 1, left = 0, right = n - 1;

        while (curr != null && top <= bottom && left <= right) {
            for (int i = left; i <= right && curr != null; i++) {
                result[top][i] = curr.val;
                curr = curr.next;
            }
            top++;

            for (int i = top; i <= bottom && curr != null; i++) {
                result[i][right] = curr.val;
                curr = curr.next;
            }
            right--;

            for (int i = right; i >= left && curr != null; i--) {
                result[bottom][i] = curr.val;
                curr = curr.next;
            }
            bottom--;

            for (int i = bottom; i >= top && curr != null; i--) {
                result[i][left] = curr.val;
                curr = curr.next;
            }
            left++;
        }

        return result;
    }
}