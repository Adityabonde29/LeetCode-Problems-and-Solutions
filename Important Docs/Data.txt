Sure! Here are the code snippets for the services and controllers for your project:

### Services

#### IUserService.cs
```csharp
public interface IUserService
{
    Task<User> RegisterUserAsync(User user);
    Task<User> AuthenticateUserAsync(string email, string password);
    Task<User> GetUserByIdAsync(int userId);
    Task UpdateUserAsync(User user);
}
```

#### UserService.cs
```csharp
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;

public class UserService : IUserService
{
    private readonly ApplicationDbContext _context;

    public UserService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<User> RegisterUserAsync(User user)
    {
        _context.Users.Add(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task<User> AuthenticateUserAsync(string email, string password)
    {
        return await _context.Users.SingleOrDefaultAsync(u => u.Email == email && u.Password == password);
    }

    public async Task<User> GetUserByIdAsync(int userId)
    {
        return await _context.Users.FindAsync(userId);
    }

    public async Task UpdateUserAsync(User user)
    {
        _context.Users.Update(user);
        await _context.SaveChangesAsync();
    }
}
```

#### IOrganizationService.cs
```csharp
public interface IOrganizationService
{
    Task<Organization> RegisterOrganizationAsync(Organization organization);
    Task<Organization> GetOrganizationByIdAsync(int organizationId);
    Task UpdateOrganizationAsync(Organization organization);
    Task VerifyOrganizationAsync(int organizationId);
}
```

#### OrganizationService.cs
```csharp
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;

public class OrganizationService : IOrganizationService
{
    private readonly ApplicationDbContext _context;

    public OrganizationService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Organization> RegisterOrganizationAsync(Organization organization)
    {
        _context.Organizations.Add(organization);
        await _context.SaveChangesAsync();
        return organization;
    }

    public async Task<Organization> GetOrganizationByIdAsync(int organizationId)
    {
        return await _context.Organizations.FindAsync(organizationId);
    }

    public async Task UpdateOrganizationAsync(Organization organization)
    {
        _context.Organizations.Update(organization);
        await _context.SaveChangesAsync();
    }

    public async Task VerifyOrganizationAsync(int organizationId)
    {
        var organization = await _context.Organizations.FindAsync(organizationId);
        if (organization != null)
        {
            organization.IsVerified = true;
            await _context.SaveChangesAsync();
        }
    }
}
```

#### IDonationRequestService.cs
```csharp
public interface IDonationRequestService
{
    Task<DonationRequest> CreateRequestAsync(DonationRequest request);
    Task<DonationRequest> GetRequestByIdAsync(int requestId);
    Task UpdateRequestAsync(DonationRequest request);
    Task DeleteRequestAsync(int requestId);
    Task<IEnumerable<DonationRequest>> GetAllRequestsAsync();
}
```

#### DonationRequestService.cs
```csharp
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;

public class DonationRequestService : IDonationRequestService
{
    private readonly ApplicationDbContext _context;

    public DonationRequestService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<DonationRequest> CreateRequestAsync(DonationRequest request)
    {
        _context.DonationRequests.Add(request);
        await _context.SaveChangesAsync();
        return request;
    }

    public async Task<DonationRequest> GetRequestByIdAsync(int requestId)
    {
        return await _context.DonationRequests.FindAsync(requestId);
    }

    public async Task UpdateRequestAsync(DonationRequest request)
    {
        _context.DonationRequests.Update(request);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteRequestAsync(int requestId)
    {
        var request = await _context.DonationRequests.FindAsync(requestId);
        if (request != null)
        {
            _context.DonationRequests.Remove(request);
            await _context.SaveChangesAsync();
        }
    }

    public async Task<IEnumerable<DonationRequest>> GetAllRequestsAsync()
    {
        return await _context.DonationRequests.ToListAsync();
    }
}
```

#### IDonationOfferService.cs
```csharp
public interface IDonationOfferService
{
    Task<DonationOffer> CreateOfferAsync(DonationOffer offer);
    Task<DonationOffer> GetOfferByIdAsync(int offerId);
    Task UpdateOfferAsync(DonationOffer offer);
    Task DeleteOfferAsync(int offerId);
    Task<IEnumerable<DonationOffer>> GetAllOffersAsync();
}
```

#### DonationOfferService.cs
```csharp
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;

public class DonationOfferService : IDonationOfferService
{
    private readonly ApplicationDbContext _context;

    public DonationOfferService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<DonationOffer> CreateOfferAsync(DonationOffer offer)
    {
        _context.DonationOffers.Add(offer);
        await _context.SaveChangesAsync();
        return offer;
    }

    public async Task<DonationOffer> GetOfferByIdAsync(int offerId)
    {
        return await _context.DonationOffers.FindAsync(offerId);
    }

    public async Task UpdateOfferAsync(DonationOffer offer)
    {
        _context.DonationOffers.Update(offer);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteOfferAsync(int offerId)
    {
        var offer = await _context.DonationOffers.FindAsync(offerId);
        if (offer != null)
        {
            _context.DonationOffers.Remove(offer);
            await _context.SaveChangesAsync();
        }
    }

    public async Task<IEnumerable<DonationOffer>> GetAllOffersAsync()
    {
        return await _context.DonationOffers.ToListAsync();
    }
}
```

#### IAdminService.cs
```csharp
public interface IAdminService
{
    Task<IEnumerable<User>> GetAllUsersAsync();
    Task<IEnumerable<Organization>> GetAllOrganizationsAsync();
    Task ApproveOrganizationAsync(int organizationId);
    Task<Dictionary<string, int>> GetStatsAsync();
}
```

#### AdminService.cs
```csharp
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class AdminService : IAdminService
{
    private readonly ApplicationDbContext _context;

    public AdminService(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IEnumerable<User>> GetAllUsersAsync()
    {
        return await _context.Users.ToListAsync();
    }

    public async Task<IEnumerable<Organization>> GetAllOrganizationsAsync()
    {
        return await _context.Organizations.ToListAsync();
    }

    public async Task ApproveOrganizationAsync(int organizationId)
    {
        var organization = await _context.Organizations.FindAsync(organizationId);
        if (organization != null)
        {
            organization.IsVerified = true;
            await _context.SaveChangesAsync();
        }
    }

    public async Task<Dictionary<string, int>> GetStatsAsync()
    {
        var stats = new Dictionary<string, int>
        {
            { "TotalUsers", await _context.Users.CountAsync() },
            { "TotalOrganizations", await _context.Organizations.CountAsync() },
            { "TotalDonationRequests", await _context.DonationRequests.CountAsync() },
            { "TotalDonationOffers", await _context.DonationOffers.CountAsync() }
        };

        return stats;
    }
}
```

### Controllers

#### UserController.cs
```csharp
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase
{
    private readonly IUserService _userService;

    public UserController(IUserService userService)
    {
        _userService = userService;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register(User user)
    {
        var createdUser = await _userService.RegisterUserAsync(user);
        return CreatedAtAction(nameof(GetUserById), new { id = createdUser.UserId }, createdUser);
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login(string email, string password)
    {
        var user = await _userService.AuthenticateUserAsync(email, password);
        if (user == null)
        {
            return Unauthorized();
        }
        return Ok(user);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetUserById(int id)
    {
        var user = await _userService.GetUserByIdAsync(id);
        if (user == null)
        {
            return NotFound();
        }
        return Ok(user);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateUser(int id, User user)
    {
        if (id != user.UserId)
        {
            return BadRequest();
        }

        await _userService.UpdateUserAsync(user);
        return NoContent();
    }
}
```

#### OrganizationController.cs
```csharp
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

[ApiController]
[Route("api/[controller]")]
public class OrganizationController : ControllerBase
{
    private readonly IOrganizationService _organizationService;

    public OrganizationController(IOrganizationService organizationService)
    {
        _organizationService = organizationService;
    }

    [HttpPost("register")]
    public async Task<IActionResult> Register(Organization organization)
    {
        var createdOrganization = await _organizationService.RegisterOrganizationAsync(organization);
        return CreatedAtAction(nameof(GetOrganizationById), new { id = created [HttpPost("register")]
    public async Task<IActionResult> Register(Organization organization)
    {
        var createdOrganization = await _organizationService.RegisterOrganizationAsync(organization);
        return CreatedAtAction(nameof(GetOrganizationById), new { id = createdOrganization.OrganizationId }, createdOrganization);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetOrganizationById(int id)
    {
        var organization = await _organizationService.GetOrganizationByIdAsync(id);
        if (organization == null)
        {
            return NotFound();
        }
        return Ok(organization);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateOrganization(int id, Organization organization)
    {
        if (id != organization.OrganizationId)
        {
            return BadRequest();
        }

        await _organizationService.UpdateOrganizationAsync(organization);
        return NoContent();
    }

    [HttpPut("verify/{id}")]
    public async Task<IActionResult> VerifyOrganization(int id)
    {
        await _organizationService.VerifyOrganizationAsync(id);
        return NoContent();
    }
}


DonationRequestController.cs
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Collections.Generic;

[ApiController]
[Route("api/[controller]")]
public class DonationRequestController : ControllerBase
{
    private readonly IDonationRequestService _donationRequestService;

    public DonationRequestController(IDonationRequestService donationRequestService)
    {
        _donationRequestService = donationRequestService;
    }

    [HttpPost]
    public async Task<IActionResult> CreateRequest(DonationRequest request)
    {
        var createdRequest = await _donationRequestService.CreateRequestAsync(request);
        return CreatedAtAction(nameof(GetRequestById), new { id = createdRequest.RequestId }, createdRequest);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetRequestById(int id)
    {
        var request = await _donationRequestService.GetRequestByIdAsync(id);
        if (request == null)
        {
            return NotFound();
        }
        return Ok(request);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateRequest(int id, DonationRequest request)
    {
        if (id != request.RequestId)
        {
            return BadRequest();
        }

        await _donationRequestService.UpdateRequestAsync(request);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteRequest(int id)
    {
        await _donationRequestService.DeleteRequestAsync(id);
        return NoContent();
    }

    [HttpGet]
    public async Task<IActionResult> GetAllRequests()
    {
        var requests = await _donationRequestService.GetAllRequestsAsync();
        return Ok(requests);
    }
}
DonationOfferController.cs
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Collections.Generic;

[ApiController]
[Route("api/[controller]")]
public class DonationOfferController : ControllerBase
{
    private readonly IDonationOfferService _donationOfferService;

    public DonationOfferController(IDonationOfferService donationOfferService)
    {
        _donationOfferService = donationOfferService;
    }

    [HttpPost]
    public async Task<IActionResult> CreateOffer(DonationOffer offer)
    {
        var createdOffer = await _donationOfferService.CreateOfferAsync(offer);
        return CreatedAtAction(nameof(GetOfferById), new { id = createdOffer.OfferId }, createdOffer);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetOfferById(int id)
    {
        var offer = await _donationOfferService.GetOfferByIdAsync(id);
        if (offer == null)
        {
            return NotFound();
        }
        return Ok(offer);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateOffer(int id, DonationOffer offer)
    {
        if (id != offer.OfferId)
        {
            return BadRequest();
        }

        await _donationOfferService.UpdateOfferAsync(offer);
        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteOffer(int id)
    {
        await _donationOfferService.DeleteOfferAsync(id);
        return NoContent();
    }

    [HttpGet]
    public async Task<IActionResult> GetAllOffers()
    {
        var offers = await _donationOfferService.GetAllOffersAsync();
        return Ok(offers);
    }
}
AdminController.cs
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Collections.Generic;

[ApiController]
[Route("api/[controller]")]
public class AdminController : ControllerBase
{
    private readonly IAdminService _adminService;

    public AdminController(IAdminService adminService)
    {
        _adminService = adminService;
    }

    [HttpGet("users")]
    public async Task<IActionResult> GetAllUsers()
    {
        var users = await _adminService.GetAllUsersAsync();
        return Ok(users);
    }

    [HttpGet("organizations")]
    public async Task<IActionResult> GetAllOrganizations()
    {
        var organizations = await _adminService.GetAllOrganizationsAsync();
        return Ok(organizations);
    }

    [HttpPut("approve/{id}")]
    public async Task<IActionResult> ApproveOrganization(int id)
    {
        await _adminService.ApproveOrganizationAsync(id);
        return NoContent();
    }

    [HttpGet("stats")]
    public async Task<IActionResult> GetStats()
    {
        var stats = await _adminService.GetStatsAsync();
        return Ok(stats);
    }
}