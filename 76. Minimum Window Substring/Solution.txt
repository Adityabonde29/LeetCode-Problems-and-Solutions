public class Solution {
    public string MinWindow(string s, string t) {
        if (string.IsNullOrEmpty(s) || string.IsNullOrEmpty(t) || s.Length < t.Length) {
            return "";
        }

        Dictionary<char, int> tCount = new Dictionary<char, int>();

        foreach (char c in t) {
            if (tCount.ContainsKey(c)) {
                tCount[c]++;
            } else {
                tCount[c] = 1;
            }
        }

        int left = 0;
        int right = 0;
        int minLength = int.MaxValue;
        int minLeft = 0;
        int required = tCount.Count, formed = 0;

        Dictionary<char, int> windowCounts = new Dictionary<char, int>();

        while (right < s.Length) {
            char c = s[right];
            if (windowCounts.ContainsKey(c)) {
                windowCounts[c]++;
            } else {
                windowCounts[c] = 1;
            }

            if (tCount.ContainsKey(c) && windowCounts[c] == tCount[c]) {
                formed++;
            }

            while (left <= right && formed == required) {
                c = s[left];
                if (right - left + 1 < minLength) {
                    minLength = right - left + 1;
                    minLeft = left;
                }

                windowCounts[c]--;
                if (tCount.ContainsKey(c) && windowCounts[c] < tCount[c]) {
                    formed--;
                }
                left++;
            }
            right++;
        }

        return minLength == int.MaxValue ? "" : s.Substring(minLeft, minLength);
    }
}